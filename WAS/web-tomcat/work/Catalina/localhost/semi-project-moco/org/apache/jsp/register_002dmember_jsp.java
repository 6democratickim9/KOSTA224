/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.70
 * Generated at: 2021-11-11 22:39:53 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class register_002dmember_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/C:/KOSTA224/WAS/web-tomcat/webapps/semi-project-moco/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1636174144432L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	function checkRegForm() {\r\n");
      out.write("		let nickname = document.getElementById(\"nickname\");\r\n");
      out.write("		let nicknameFlag = document.getElementById(\"nicknameFlag\");\r\n");
      out.write("		\r\n");
      out.write("		if (document.getElementById(\"pass\").value != document\r\n");
      out.write("				.getElementById(\"confirmPass\").value) {\r\n");
      out.write("			alert(\"비밀번호가 일치하지 않습니다\");\r\n");
      out.write("			return false;\r\n");
      out.write("		}\r\n");
      out.write("		if (document.getElementById(\"flag\").value != document\r\n");
      out.write("				.getElementById(\"email\").value) {\r\n");
      out.write("			alert(\"인증받은 아이디가 아닙니다 \\n아이디 중복확인하세요\");\r\n");
      out.write("			return false;\r\n");
      out.write("		}\r\n");
      out.write("		if(nickname.value != nicknameFlag.value) {\r\n");
      out.write("			alert(\"중복된 닉네임 입니다.\\n사용 가능한 닉네임으로 변경해주세요\");\r\n");
      out.write("			return false;\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("	}\r\n");
      out.write("	function checkEmail() {\r\n");
      out.write("		let email = document.getElementById(\"email\");\r\n");
      out.write("		if (email.value == \"\") {\r\n");
      out.write("			alert(\"아이디(이메일)을 입력하세요\");\r\n");
      out.write("		} else {\r\n");
      out.write("			window.open(\"EmailCheckController.do?email=\" + email.value, \"mypopup\",\r\n");
      out.write("					\"width=350,height=150,top=150,left=400\");\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("	function passwordChanged() {\r\n");
      out.write("		let confirmPass = document.getElementById('confirmPass');\r\n");
      out.write("		let pass = document.getElementById('pass');\r\n");
      out.write("		let confirmResult = document.getElementById('confirmResult');\r\n");
      out.write("		\r\n");
      out.write("		if(confirmPass.value == pass.value) {\r\n");
      out.write("			confirmResult.textContent = \"비밀번호가 일치합니다\";\r\n");
      out.write("			confirmResult.style.color = \"#007bff\";\r\n");
      out.write("		}\r\n");
      out.write("		else {\r\n");
      out.write("			confirmResult.textContent = \"비밀번호가 일치하지 않습니다\";\r\n");
      out.write("			confirmResult.style.color = \"red\";\r\n");
      out.write("		}\r\n");
      out.write("		if(confirmPass.value == \"\" && pass.value == \"\") {\r\n");
      out.write("			confirmResult.textContent = \"\";\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		let passwordLength = document.getElementById('passwordLength');\r\n");
      out.write("		\r\n");
      out.write("		var strength = document.getElementById('strength');\r\n");
      out.write("		var strongRegex = new RegExp(\r\n");
      out.write("				\"^(?=.{10,})(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*\\\\W).*$\", \"g\");\r\n");
      out.write("		var mediumRegex = new RegExp(\r\n");
      out.write("				\"^(?=.{8,})(((?=.*[A-Z])(?=.*[a-z]))|((?=.*[A-Z])(?=.*[0-9]))|((?=.*[a-z])(?=.*[0-9]))).*$\",\r\n");
      out.write("				\"g\");\r\n");
      out.write("		var enoughRegex = new RegExp(\"(?=.{6,}).*\", \"g\");\r\n");
      out.write("		var pwd = document.getElementById(\"pass\");\r\n");
      out.write("		\r\n");
      out.write("		if (pwd.value.length == 0) {\r\n");
      out.write("			strength.innerHTML = '보안';\r\n");
      out.write("			passwordLength.textContent = \"\";\r\n");
      out.write("		} else if (false == enoughRegex.test(pwd.value)) {\r\n");
      out.write("			// strength.innerHTML = '8자리 이상 입력';\r\n");
      out.write("			passwordLength.textContent = \"비밀번호는 6자리 이상 입력하셔야 합니다\";\r\n");
      out.write("			passwordLength.style.color = \"red\";\r\n");
      out.write("		} else if (strongRegex.test(pwd.value)) {\r\n");
      out.write("			strength.innerHTML = '<span style=\"color:green\">안전</span>';\r\n");
      out.write("			passwordLength.textContent = \"\";\r\n");
      out.write("		} else if (mediumRegex.test(pwd.value)) {\r\n");
      out.write("			strength.innerHTML = '<span style=\"color:orange\">보통</span>';\r\n");
      out.write("			passwordLength.textContent = \"\";\r\n");
      out.write("		} else {\r\n");
      out.write("			strength.innerHTML = '<span style=\"color:red\">약함</span>';\r\n");
      out.write("			passwordLength.textContent = \"\";\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("</script>\r\n");
      out.write("<div class=\"container text-center\">\r\n");
      out.write("	<div class=\"row\" style=\"margin-top: 50px;\">\r\n");
      out.write("		<div class=\"col-sm-6 offset-sm-3\">\r\n");
      out.write("			<div class=\"formBox\" style=\"border: 1px solid rgba(0,0,0,0.2);\">\r\n");
      out.write("				<form action=\"RegisterController.do\" method=\"post\" onsubmit=\"return checkRegForm()\" style=\"margin: 60px;\">\r\n");
      out.write("					<img class=\"mb-4\" src=\"images/logo.png\" style=\"width: 150px;\">\r\n");
      out.write("					<h1 class=\"h4 mb-3 font-weight-normal\">회원가입</h1>\r\n");
      out.write("					<div class=\"input-group mb-3\">\r\n");
      out.write("						<input type=\"email\" class=\"form-control\" name=\"email\" id=\"email\" required=\"required\" placeholder=\"아이디(이메일)\">\r\n");
      out.write("						<input type=\"hidden\" id=\"flag\" value=\"\">\r\n");
      out.write("						<div class=\"input-group-append\">\r\n");
      out.write("							<button type=\"button\" onclick=\"checkEmail()\" class=\"btn btn-outline-primary\">중복확인</button>\r\n");
      out.write("						</div>\r\n");
      out.write("						");
      out.write("\r\n");
      out.write("					</div>\r\n");
      out.write("					");
      out.write("\r\n");
      out.write("					<div class=\"input-group mb-3\">\r\n");
      out.write("						<input type=\"password\" class=\"form-control\" name=\"password\" id=\"pass\" required=\"required\" placeholder=\"비밀번호\" maxlength=\"100\" onkeyup=\"return passwordChanged();\">\r\n");
      out.write("						<div class=\"input-group-append\">\r\n");
      out.write("							<span id=\"strength\" class=\"input-group-text\">보안</span>\r\n");
      out.write("						</div>\r\n");
      out.write("					</div>\r\n");
      out.write("					<div>\r\n");
      out.write("						<p id=\"passwordLength\" style=\"font-size: 13px\"><p>\r\n");
      out.write("					</div>\r\n");
      out.write("					");
      out.write("\r\n");
      out.write("					<div class=\"input-group mb-3\">\r\n");
      out.write("						<input type=\"password\" class=\"form-control\" name=\"confirmPassword\" id=\"confirmPass\" required=\"required\" placeholder=\"비밀번호 확인\" onkeyup=\"checkPassword()\">\r\n");
      out.write("					</div>\r\n");
      out.write("					<div>\r\n");
      out.write("						<p id=\"confirmResult\" style=\"font-size: 13px\"><p>\r\n");
      out.write("					</div>\r\n");
      out.write("					<div class=\"input-group mb-3\">\r\n");
      out.write("						<input id=\"nickname\" type=\"text\" class=\"form-control\" name=\"nickname\" required=\"required\" placeholder=\"닉네임\" onkeyup=\"checkNickname()\">\r\n");
      out.write("						<input id=\"nicknameFlag\" type=\"hidden\" value=\"\">\r\n");
      out.write("					</div>\r\n");
      out.write("					<div>\r\n");
      out.write("						<p id=\"duplicateResult\" style=\"font-size: 13px\"><p>\r\n");
      out.write("					</div>\r\n");
      out.write("					<div class=\"input-group mb-3\">\r\n");
      out.write("						<div class=\"input-group-prepend\">\r\n");
      out.write("							<span class=\"input-group-text\" id=\"basic-addon3\">www.github.com/</span>\r\n");
      out.write("						</div>\r\n");
      out.write("						<input type=\"text\" class=\"form-control\" id=\"basic-url\" aria-describedby=\"basic-addon3\" name=\"github\" required=\"required\" placeholder=\"username\">\r\n");
      out.write("					</div>\r\n");
      out.write("					<button type=\"submit\" class=\"btn btn-primary btn-block\">회원가입</button>\r\n");
      out.write("				</form>\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("		");
      out.write("\r\n");
      out.write("	</div>\r\n");
      out.write("	");
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("	function checkNickname() {\r\n");
      out.write("		console.log(\"checkNickname\");\r\n");
      out.write("		\r\n");
      out.write("		let nickname = document.getElementById(\"nickname\").value;\r\n");
      out.write("		let duplicateResult = document.getElementById(\"duplicateResult\");\r\n");
      out.write("		\r\n");
      out.write("		let nicknameFlag = document.getElementById(\"nicknameFlag\");\r\n");
      out.write("		\r\n");
      out.write("		let xhr = new XMLHttpRequest();\r\n");
      out.write("		// 서버로부터 응답 받았을 때 동작할 익명함수를 등록\r\n");
      out.write("		xhr.onload = () => {\r\n");
      out.write("			console.log(xhr.responseText);\r\n");
      out.write("			const json = xhr.responseText;\r\n");
      out.write("			const result = JSON.parse(json);\r\n");
      out.write("			\r\n");
      out.write("			console.log(result.duplicate);\r\n");
      out.write("			if(result.duplicate === false) {\r\n");
      out.write("				console.log(\"사용가능\");\r\n");
      out.write("				duplicateResult.innerHTML = \"사용 가능한 닉네임입니다\";\r\n");
      out.write("				duplicateResult.style.color = \"#007bff\";\r\n");
      out.write("				nicknameFlag.value = nickname;\r\n");
      out.write("			}\r\n");
      out.write("			else {\r\n");
      out.write("				console.log(\"사용불가\");\r\n");
      out.write("				duplicateResult.innerHTML = \"사용 불가한 닉네임입니다\";\r\n");
      out.write("				duplicateResult.style.color = \"red\";\r\n");
      out.write("				nicknameFlag.value = \"\";\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			if(nickname == \"\") {\r\n");
      out.write("				duplicateResult.textContent = \"\";\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("		xhr.open(\"get\", \"NicknameCheckServlet?nickname=\" + nickname);\r\n");
      out.write("		xhr.send();\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	function checkPassword() {\r\n");
      out.write("		let confirmPass = document.getElementById('confirmPass');\r\n");
      out.write("		let pass = document.getElementById('pass');\r\n");
      out.write("		let confirmResult = document.getElementById('confirmResult');\r\n");
      out.write("		\r\n");
      out.write("		if(confirmPass.value == pass.value) {\r\n");
      out.write("			confirmResult.textContent = \"비밀번호가 일치합니다\";\r\n");
      out.write("			confirmResult.style.color = \"#007bff\";\r\n");
      out.write("		}\r\n");
      out.write("		else {\r\n");
      out.write("			confirmResult.textContent = \"비밀번호가 일치하지 않습니다\";\r\n");
      out.write("			confirmResult.style.color = \"red\";\r\n");
      out.write("		}\r\n");
      out.write("		if(confirmPass.value == \"\" && pass.value == \"\") {\r\n");
      out.write("			confirmResult.textContent = \"\";\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
